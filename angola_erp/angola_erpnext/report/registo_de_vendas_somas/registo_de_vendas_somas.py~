# -*- coding: utf-8 -*-
# Copyright (c) 2013, Helio de Jesus and contributors
# For license information, please see license.txt

from __future__ import unicode_literals
import frappe
from frappe.utils import flt
from frappe import msgprint, _

from frappe import translate
import requests


def execute(filters=None):
	return _execute(filters)

def _execute(filters, additional_table_columns=None, additional_query_columns=None):
	if not filters: filters = frappe._dict({})

	invoice_list = get_invoices(filters, additional_query_columns)

	print 'Invoice List'
	print invoice_list
	print additional_query_columns
	columns = get_columns(invoice_list, additional_table_columns)

	if not invoice_list:
		msgprint(_("No record found"))
		return columns, invoice_list

	#invoice_income_map = get_invoice_income_map(invoice_list)
	#invoice_income_map, invoice_tax_map = get_invoice_tax_map(invoice_list,
	#	invoice_income_map, income_accounts)

	#invoice_so_dn_map = get_invoice_so_dn_map(invoice_list)
	#customers = list(set([inv.customer for inv in invoice_list]))
	#customer_map = get_customer_details(customers)
	company_currency = frappe.db.get_value("Company", filters.get("company"), "default_currency")
	#mode_of_payments = get_mode_of_payments([inv.name for inv in invoice_list])
	#usuario_ = frappe.db.get_value("User", filters.get("owner"), "username")


	mes_ = 0
	mes2_ = 0


	data = []
	for inv in invoice_list:
		# invoice details
		#sales_order = list(set(invoice_so_dn_map.get(inv.name, {}).get("sales_order", [])))

		#if (sales_order  == None or sales_order  == []) :						
		#	columns[10] = columns[10].replace('100','-1')			

		#delivery_note = list(set(invoice_so_dn_map.get(inv.name, {}).get("delivery_note", [])))
		#if (delivery_note  == None or delivery_note  == []) :						
		#	columns[11] = columns[11].replace('100','-1')				

		#customer_details = customer_map.get(inv.customer, {})
		print inv
		print inv.Ano
		print inv.Mes
		print inv.Total



		#acrescenta o mes corrente ....
		if inv.Mes == 1: mes2_ = 'Janeiro'
		if inv.Mes == 2: mes2_ = 'Fevereiro'
		if inv.Mes == 3: mes2_ = 'MarÃ§o'
		if inv.Mes == 4: mes2_ = 'Abril'
		if inv.Mes == 5: mes2_ = 'Maio'
		if inv.Mes == 6: mes2_ = 'Junho'
		if inv.Mes == 7: mes2_ = 'Julho'
		if inv.Mes == 8: mes2_ = 'Agosto'
		if inv.Mes == 9: mes2_ = 'Setembro'
		if inv.Mes == 10: mes2_ = 'Outubro'
		if inv.Mes == 11: mes2_ = 'Novembro'
		if inv.Mes == 12: mes2_ = 'Dezembro'

		#print mes2_.encode('utf-8') 
		

		row = [
			inv.Ano, mes2_ , inv.Total
		]

		if additional_query_columns:
			for col in additional_query_columns:
				row.append(inv.get(col))

		#row +=[
		#	customer_details.get("customer_group"),
		#	customer_details.get("territory"),
		#	inv.debit_to, ", ".join(mode_of_payments.get(inv.name, [])),
		#	inv.project, inv.remarks,
		#	", ".join(sales_order), ", ".join(delivery_note), company_currency, frappe.db.get_value("User", inv.owner, "username")
		#]
		# map income values
		base_net_total = 0
		#for income_acc in income_accounts:
		#	income_amount = flt(invoice_income_map.get(inv.name, {}).get(income_acc))
		#	base_net_total += income_amount
		#	row.append(income_amount)

		# net total
		#row.append(base_net_total or inv.base_net_total)

		# tax account
		total_tax = 0
		#for tax_acc in tax_accounts:
		#	if tax_acc not in income_accounts:
		#		tax_amount = flt(invoice_tax_map.get(inv.name, {}).get(tax_acc))
		#		total_tax += tax_amount
		#		row.append(tax_amount)

		# total tax, grand total, outstanding amount & rounded total
		row += [inv.Total]

		data.append(row)

	return columns, data

def get_columns(invoice_list, additional_table_columns):
	"""return columns based on filters"""
	columns = [
		_("Ano") + "::80", _("Mes") + "::80"
	]

	columns = columns + [_("Total") + ":Currency/currency:120"]

	return columns

def get_conditions(filters):
	conditions = ""

	if filters.get("company"): conditions += " and company=%(company)s"

	if filters.get("from_date"): conditions += " and posting_date >= %(from_date)s"
	if filters.get("to_date"): conditions += " and posting_date <= %(to_date)s"


	return conditions

def get_invoices(filters, additional_query_columns):
	if additional_query_columns:
		additional_query_columns = ', ' + ', '.join(additional_query_columns)

	conditions = get_conditions(filters)
	return frappe.db.sql(""" select year(posting_date) as Ano, month(posting_date) as Mes, sum(base_grand_total) as Total from `tabSales Invoice` where docstatus =1 and 			outstanding_amount =0 %s group by month(posting_date) order by year(posting_date)""".format(additional_query_columns or '') %
		conditions, filters, as_dict=1)	

	#return frappe.db.sql("""select name, owner, posting_date, debit_to, project, customer, customer_name, remarks,
	#	base_net_total, base_grand_total, base_rounded_total, outstanding_amount {0}
	#	from `tabSales Invoice`
	#	where docstatus = 1 %s order by posting_date desc, name desc""".format(additional_query_columns or '') %
	#	conditions, filters, as_dict=1)

def get_invoice_income_map(invoice_list):
	income_details = frappe.db.sql("""select parent, income_account, sum(base_net_amount) as amount
		from `tabSales Invoice Item` where parent in (%s) group by parent, income_account""" %
		', '.join(['%s']*len(invoice_list)), tuple([inv.name for inv in invoice_list]), as_dict=1)

	invoice_income_map = {}
	for d in income_details:
		invoice_income_map.setdefault(d.parent, frappe._dict()).setdefault(d.income_account, [])
		invoice_income_map[d.parent][d.income_account] = flt(d.amount)

	return invoice_income_map

def get_invoice_tax_map(invoice_list, invoice_income_map, income_accounts):
	tax_details = frappe.db.sql("""select parent, account_head,
		sum(base_tax_amount_after_discount_amount) as tax_amount
		from `tabSales Taxes and Charges` where parent in (%s) group by parent, account_head""" %
		', '.join(['%s']*len(invoice_list)), tuple([inv.name for inv in invoice_list]), as_dict=1)

	invoice_tax_map = {}
	for d in tax_details:
		if d.account_head in income_accounts:
			if invoice_income_map[d.parent].has_key(d.account_head):
				invoice_income_map[d.parent][d.account_head] += flt(d.tax_amount)
			else:
				invoice_income_map[d.parent][d.account_head] = flt(d.tax_amount)
		else:
			invoice_tax_map.setdefault(d.parent, frappe._dict()).setdefault(d.account_head, [])
			invoice_tax_map[d.parent][d.account_head] = flt(d.tax_amount)

	return invoice_income_map, invoice_tax_map

def get_invoice_so_dn_map(invoice_list):
	si_items = frappe.db.sql("""select parent, sales_order, delivery_note, so_detail
		from `tabSales Invoice Item` where parent in (%s)
		and (ifnull(sales_order, '') != '' or ifnull(delivery_note, '') != '')""" %
		', '.join(['%s']*len(invoice_list)), tuple([inv.name for inv in invoice_list]), as_dict=1)

	invoice_so_dn_map = {}
	for d in si_items:
		if d.sales_order:
			invoice_so_dn_map.setdefault(d.parent, frappe._dict()).setdefault(
				"sales_order", []).append(d.sales_order)

		delivery_note_list = None
		if d.delivery_note:
			delivery_note_list = [d.delivery_note]
		elif d.sales_order:
			delivery_note_list = frappe.db.sql_list("""select distinct parent from `tabDelivery Note Item`
				where docstatus=1 and so_detail=%s""", d.so_detail)

		if delivery_note_list:
			invoice_so_dn_map.setdefault(d.parent, frappe._dict()).setdefault("delivery_note", delivery_note_list)

	return invoice_so_dn_map

def get_customer_details(customers):
	customer_map = {}
	for cust in frappe.db.sql("""select name, territory, customer_group from `tabCustomer`
		where name in (%s)""" % ", ".join(["%s"]*len(customers)), tuple(customers), as_dict=1):
			customer_map.setdefault(cust.name, cust)

	return customer_map


def get_mode_of_payments(invoice_list):
	mode_of_payments = {}
	if invoice_list:
		inv_mop = frappe.db.sql("""select parent, mode_of_payment
			from `tabSales Invoice Payment` where parent in (%s) group by parent, mode_of_payment""" %
			', '.join(['%s']*len(invoice_list)), tuple(invoice_list), as_dict=1)

		for d in inv_mop:
			mode_of_payments.setdefault(d.parent, []).append(d.mode_of_payment)

	return mode_of_payments
